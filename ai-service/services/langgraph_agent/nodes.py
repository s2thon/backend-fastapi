# Bu dosya, grafiÄŸin mantÄ±ÄŸÄ±nÄ± iÃ§eren dÃ¼ÄŸÃ¼m fonksiyonlarÄ±nÄ± (call_model, should_continue) barÄ±ndÄ±rÄ±r.

from typing import Literal
from .graph_state import GraphState
from langchain_core.messages import ToolMessage, SystemMessage

def summarize_tool_outputs(state: GraphState):
    """
    AraÃ§lardan gelen Ã§Ä±ktÄ±larÄ± akÄ±llÄ±ca birleÅŸtirir.
    - BaÅŸarÄ±lÄ± sonuÃ§larÄ± listeler.
    - "BulunamadÄ±" veya "tÃ¼kendi" gibi bilgilendirici ama "baÅŸarÄ±sÄ±z" olmayan sonuÃ§larÄ± doÄŸru ÅŸekilde ekler.
    - Tavsiye aracÄ±ndan gelen boÅŸ sonuÃ§larÄ± tamamen gÃ¶rmezden gelerek sessiz kalmasÄ±nÄ± saÄŸlar.
    - GerÃ§ek veritabanÄ± hatalarÄ±nÄ± belirtir.
    """
    messages = state["messages"]
    
    # Sadece bu dÃ¶ngÃ¼yle ilgili ToolMessage'larÄ± al
    last_agent_message = next((msg for msg in reversed(messages) if hasattr(msg, 'tool_calls') and msg.tool_calls), None)
    if not last_agent_message:
        return {}
    tool_call_ids = {tc['id'] for tc in last_agent_message.tool_calls}
    tool_outputs = [msg for msg in messages if isinstance(msg, ToolMessage) and msg.tool_call_id in tool_call_ids]
    
    if not tool_outputs:
        return {}

    summary_lines = []
    for output in tool_outputs:
        content = output.content.strip() if output.content else ""
        tool_name = output.name

        # 1. Tavsiye aracÄ±ndan gelen boÅŸ cevabÄ± tamamen yoksay.
        if tool_name == 'get_recommendations_tool' and not content:
            continue  # Bu Ã§Ä±ktÄ±yÄ± Ã¶zete hiÃ§ ekleme.

        # 2. GerÃ§ek bir veritabanÄ± hatasÄ± varsa belirt.
        if "hatasÄ± oluÅŸtu" in content:
            summary_lines.append(f"- {tool_name} kullanÄ±lÄ±rken bir sorun yaÅŸandÄ±.")
        # 3. AnlamlÄ± bir sonuÃ§ varsa (boÅŸ deÄŸilse) ekle.
        #    Bu, "stok tÃ¼kendi" veya "Ã¼rÃ¼n bulunamadÄ±" gibi geÃ§erli bilgileri de kapsar.
        elif content:
            summary_lines.append(f"- {content}")

    # Ã–zetlenecek anlamlÄ± bir bilgi yoksa, sonraki adÄ±mÄ± karÄ±ÅŸtÄ±rmamak iÃ§in boÅŸ dÃ¶n.
    if not summary_lines:
        return {}

    summary = "AraÃ§lardan ÅŸu bilgiler toplandÄ±:\n" + "\n".join(summary_lines)
    
    print(f"ğŸ“‹ AkÄ±llÄ± Ã–zetleme TamamlandÄ±:\n{summary}")

    return {"messages": [SystemMessage(content=summary)]}


def call_model(state: GraphState, model_with_tools):
    """
    LLM'i (yapay zeka modelini) Ã§aÄŸÄ±ran ana dÃ¼ÄŸÃ¼m.
    Modeli dÄ±ÅŸarÄ±dan parametre olarak alarak daha esnek bir yapÄ± sunar.
    """
    # Mevcut sohbet geÃ§miÅŸini al
    messages = state["messages"]
    # Modeli bu geÃ§miÅŸle Ã§aÄŸÄ±r ve yanÄ±tÄ±nÄ± al
    response = model_with_tools.invoke(messages)
    # Gelen yanÄ±tÄ± mesaj listesine eklenmek Ã¼zere dÃ¶ndÃ¼r
    return {"messages": [response]}

def validate_input(state: GraphState) -> dict:
    """
    KullanÄ±cÄ± girdisini doÄŸrular ve temizler.
    ZararlÄ± iÃ§erik, Ã§ok uzun mesajlar veya boÅŸ girdileri kontrol eder.
    """
    last_message = state["messages"][-1]
    content = last_message.content
    
    # BoÅŸ girdi kontrolÃ¼
    if not content or content.strip() == "":
        return {
            "messages": [
                {"role": "assistant", "content": "LÃ¼tfen bir soru veya mesaj yazÄ±n."}
            ],
            "validation_error": True
        }
    
    # Ã‡ok uzun mesaj kontrolÃ¼
    if len(content) > 1000:
        return {
            "messages": [
                {"role": "assistant", "content": "MesajÄ±nÄ±z Ã§ok uzun. LÃ¼tfen daha kÄ±sa bir mesaj gÃ¶nderin."}
            ],
            "validation_error": True
        }
    
    # ZararlÄ± iÃ§erik kontrolÃ¼ (geliÅŸtirilmiÅŸ)
    harmful_keywords = ["hack", "spam", "virus", "malware", "phishing", "scam"]
    if any(keyword in content.lower() for keyword in harmful_keywords):
        return {
            "messages": [
                {"role": "assistant", "content": "Bu tÃ¼r iÃ§erikler iÃ§in yardÄ±m saÄŸlayamam. LÃ¼tfen uygun bir soru sorun."}
            ],
            "validation_error": True
        }
    
    # Rate limiting kontrolÃ¼ (IP bazlÄ± veya session bazlÄ±)
    if len(content.split()) > 200:  # Ã‡ok fazla kelime
        return {
            "messages": [
                {"role": "assistant", "content": "LÃ¼tfen daha kÄ±sa ve Ã¶z bir mesaj gÃ¶nderin."}
            ],
            "validation_error": True
        }
    
    # BaÅŸarÄ±lÄ± validasyon
    return {
        "validated": True,
        "validation_error": False
    }

def enhanced_should_continue(state: GraphState) -> Literal["tools", "error", "end"]:
    """
    BasitleÅŸtirilmiÅŸ karar verme mantÄ±ÄŸÄ± - sadece tools, error, veya end.
    """
    # Validasyon hatasÄ± kontrolÃ¼
    if state.get("validation_error"):
        return "end"
    
    last_message = state["messages"][-1]
    
    # Hata kontrolÃ¼
    if state.get("error"):
        return "error"
    
    # AraÃ§ Ã§aÄŸrÄ±sÄ± gerekli mi?
    if hasattr(last_message, 'tool_calls') and last_message.tool_calls:
        return "tools"
    
    return "end"




