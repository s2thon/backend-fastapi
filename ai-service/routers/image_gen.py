# ai-service/routers/image_gen.py

from fastapi import APIRouter
from pydantic import BaseModel
import base64
import hashlib
# Servislerimizi import ediyoruz
from services.image_gen import create_image_as_base64
# ... (diÄŸer importlar)
from services.supabase_client import get_or_upload_image_url 

router = APIRouter()

class PreviewRequest(BaseModel):
    product_name: str


# Kaydedilecek gÃ¶rselin Base64 verisini taÅŸÄ±yan model
class SaveImageRequest(BaseModel):
    base64_data_url: str

@router.post("/preview-image", tags=["Image Generation"])
async def preview_image(req: PreviewRequest):
    """
    Sadece bir Ã¼rÃ¼n gÃ¶rseli oluÅŸturur ve Ã¶nizleme iÃ§in Base64 formatÄ±nda geri dÃ¶ndÃ¼rÃ¼r.
    Bu aÅŸamada hiÃ§bir yere kayÄ±t yapÄ±lmaz.
    """
    try:
        prompt = f"High-quality product shot of {req.product_name}, white background, commercial photography, 4k"
        
        # Servisi Ã§aÄŸÄ±r ve doÄŸrudan Base64 data URL'ini al
        base64_data_url = create_image_as_base64(prompt)



        return {
            "message": "Preview generated successfully. This image is not saved.",
            "image_data_url": base64_data_url
        }
        
    except Exception as e:
        return {"error": str(e)}, 500


@router.post("/save-image", tags=["Image Generation"])
async def save_image(req: SaveImageRequest):
    """
    Frontend'den gelen Base64 formatÄ±ndaki bir gÃ¶rseli alÄ±r.
    Bu gÃ¶rseli iÃ§eriÄŸine gÃ¶re benzersiz bir isimle Supabase Storage'a kaydeder
    ve herkesin eriÅŸebileceÄŸi (public) URL'ini dÃ¶ndÃ¼rÃ¼r.
    """
    try:
        # 1. AdÄ±m: Ä°stekten gelen Base64 verisini al.
        base64_data_url = req.base64_data_url

        # 2. AdÄ±m: GÃ¶rselin iÃ§eriÄŸine gÃ¶re benzersiz bir dosya adÄ± oluÅŸtur (SHA-256 Hash).
        # Bu, kullanÄ±cÄ±nÄ±n aynÄ± Ã¶nizlemeyi birden fazla kez kaydetmesini engeller.
        header, encoded_data = base64_data_url.split(',', 1)
        image_bytes = base64.b64decode(encoded_data)
        
        hasher = hashlib.sha256()
        hasher.update(image_bytes)
        file_name = f"{hasher.hexdigest()}.png"

        # 3. AdÄ±m: GÃ¶rseli Supabase'e yÃ¼kle (veya zaten varsa mevcut URL'ini al).
        print(f"ğŸ’¾ Ã–nizlemeden gelen gÃ¶rsel '{file_name}' adÄ±yla Supabase'e kaydediliyor...")
        public_url = get_or_upload_image_url(
            base64_data_url=base64_data_url,
            file_name=file_name
        )

        # 4. AdÄ±m: BaÅŸarÄ±lÄ± yanÄ±tÄ± ve kalÄ±cÄ± public URL'i dÃ¶ndÃ¼r.
        return {
            "message": "Image from preview saved successfully.",
            "image_url": public_url
        }
        
    except Exception as e:
        return {"error": str(e)}, 500